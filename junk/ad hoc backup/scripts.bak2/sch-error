#!/bin/dash 
#=======================================================================
# File:      sch-error
# Created:   16/07/2015
# Purpose:   see usage function below
# Copyright: Â© Bill Cane
# Email:
#
# Licence: This program is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or(at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#=======================================================================
[ "$(whoami)" != 'root' ] || { echo "sch-error can't run as root"; exit 1; }
#=======================================================================

usage()
{
cat << EOF
NAME
      sch-error - handle an error, locating source file and line from error code

SYNOPSIS
      sch-error [OPTION] [ARG]
      
      -c <error-code>        unique 5-char error code embedded in calling script
      
      -m <error-message>     message describing error
      
      -h                     display usage
      
      -c is required unless -h is used
      -m is optional - if not used default message is 'command failed'
      if -h is used, all other options are ignored

DESCRIPTION
      if sch-error itself encounters an internal error, the log entry passed 
      from the calling routine will be replaced by one referring to sch-error's 
      internal error. Because line number can't be determined without sch-error
      recursing or messy code.

EXIT STATUS
      0      if OK pressed or if -h used
      1      if failed for any reason

USAGE
      sch-error -c '12345' -m "it's all gone horribly wrong..."
EOF
}

valid_err_code() { #$1=err-code
      [ $(echo ${#ErrCode}) -eq 5 ] || return 1 # length 5 chars

      case ${1#[-+]} in  # all chars numeric TODO cargo cult (+-) !
            *[!0-9]* ) return 1 ;;
            * ) return 0 ;;
      esac
}

abend() { # $1=error-code $2=error-message
      #just show user the error - don't log it
      sch-dlg-error -r 'sch-error' -l '??' -c "$1" -m "$2"
      exit 1
} 

Src='??'; Line='??'; ErrCode=''; ErrMsg='command failed'; c='false'

while getopts ":c:m:h" Option
do
      case "$Option" in
            c ) c='true'; ErrCode="$OPTARG" ;;
            m ) ErrMsg="$OPTARG" ;;
            h ) usage; exit 0 ;;
      esac
done

[ "$c" = 'true' ] || abend '14790' 'missing option or argument -c'
valid_err_code "$ErrCode"
[ "$?" = 0 ] || abend '52214' 'invalid argument to option -c'

# grep for the calling routine in /usr/bin. To speed things up, assume
# there are no duplicate error codes in scripts so the first one found is
# the correct one. TODO add handling for case when error code not found by grep
Src="$(grep --line-number $ErrCode /usr/bin/sch* |head -n1 |cut -d: -f1)"
Src=$(basename "$Src")
Line="$(grep --line-number $ErrCode /usr/bin/sch* |head -n1 |cut -d: -f2)" 

sch-log -e "$Src | line $Line | $ErrCode - $ErrMsg" 
sch-dlg-error -r "$Src" -l "$Line" -c "$ErrCode" -m "$ErrMsg"
