#!/bin/dash
#=======================================================================
# File:      sch-file-exists
# Created:   05/10/2014
# Purpose:   Determine if a file exists and has specified properties. If
#            it doesn't have all the specified properties, report lacking
#            ones on stdout
# Author:    Bill Cane
# Email:     schoonerdemo@gmail.comm
# Copyright: Â© Bill Cane
#
# Licence: This program is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or(at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#===============================================================================
# shellcheck disable=SC1091
. /usr/bin/sch-include; die_if_root
#========= initializations =====================================================
File=''; Output=''; Fail=1
IsRead=1; IsWrite=1; IsExec=1; IsFile=1; IsDir=1; IsMime=1; Mime=''
IsEmpty=1; IsSymb=1; IsOwnUID=1; IsOwnGID=1

#========= main ================================================================
while getopts ":s:rwxfNdeOGm:h" Option
do
      case "$Option" in
            s ) File="$OPTARG" ;;
            r ) IsRead=0 ;;
            w ) IsWrite=0 ;;
            x ) IsExec=0 ;;
            f ) IsFile=0 ;;
            d ) IsDir=0 ;;
            e ) IsEmpty=0 ;;
            N ) IsSymb=0 ;;
            O ) IsOwnUID=0 ;;
            G ) IsOwnGID=0 ;;
            m ) IsMime=0; Mime="$OPTARG";;
            h ) usage; exit 0 ;;
            * ) bad_option '-??' '10257' ;;
      esac
done

# validate args

if [ $IsDir -eq 0 ] && [ $IsFile -eq 0 ]; then
      bad_option '-f' '17944'
fi

[ "$File" != '' ] || bad_option '-s' '56123'

if [ $IsMime -eq 0 ] && [ "$Mime" = '' ]; then
      bad_option '-m' '41618'
fi

# check against specified characteristics
if [ ! -e "$File" ]; then
       Output="$Output $(gettext 'non-existent')"
       echo "$Output"
       exit 1
fi

if [ $IsRead -eq 0 ] && [ ! -r "$File" ]; then
      Output="$Output $(gettext 'non-readable')"; Fail=0
fi

if [ $IsWrite -eq 0 ] && [ ! -w "$File" ]; then
      Output="$Output $(gettext 'non-writable')"; Fail=0
fi

if [ $IsExec -eq 0 ] && [ ! -x "$File" ]; then
      Output="$Output $(gettext 'non-executable')"; Fail=0
fi

if [ $IsDir -eq 0 ] && [ ! -d "$File" ]; then
      Output="$Output $(gettext 'non-directory')"; Fail=0
fi

if [ $IsSymb -eq 0 ] && [ ! -S "$File" ]; then
      Output="$Output $(gettext 'non-symbolic-link')"; Fail=0
fi

if [ $IsFile -eq 0 ] && [ ! -f "$File" ]; then
      Output="$Output $(gettext 'non-regular-file')"; Fail=0
fi

if [ $IsEmpty -eq 0 ] && [ ! -s "$File" ]; then
      Output="$Output $(gettext 'non-empty')"; Fail=0
fi

if [ $IsOwnUID -eq 0 ] && [ ! -O "$File" ]; then
      Output="$Output $(gettext 'not-owned-by-this-uid')"; Fail=0
fi

if [ $IsOwnGID -eq 0 ] && [ ! -G "$File" ]; then
      Output="$Output $(gettext 'not-owned-by-this-gid')"; Fail=0
fi

if [ $IsMime -eq 0 ] && [ $(file -b --mime-type "$File") != "$Mime" ]; then
      Output="$Output $(gettext 'not-specified-mimetype')"; Fail=0
fi

[ $Fail -eq 0 ] && { echo "$Output"; exit 1; }; exit 0

#========= functions ===========================================================
usage()
{
cat << EOF
NAME
       sch-file-exists - Determine if a file exists and has specified properties.
       If it doesn't have all the specified properties, report lacking ones
       on stdout

SYNOPSIS
       sch-file-exists [OPTION]... [FILE]...

DESCRIPTION
       Where possible, options follow operators in dash 'test' builtin, the
       exceptions being -e, -m and -s

       -s <filespec>
                   ARG: filespec (absolute or relative path)
       -r has read permissions
       -w has write permissions (result not valid on readonly file system)
       -x has execute permissions
       -f is a regular file
       -d is a directory
       -N is a symbolic link
       -e is not empty
       -O is owned by effective UID of this process
       -G is owned by effective GID of this process
       -m <mime-type>
                   ARG: mime-type (eg 'text/plain')
EXIT STATUS
       0      File exists and has all the properties
              specified by the options.

       1      File does not exist or is missing one or
              more properties specified by the options.

       Out If exit status 1, lists the missing properties
              in a space-separated string. For example:

              'non-readable non-writable non-executable'

              Possible elements in the output string are:-

               either 'non-existent'
               or 'bad-arguments-d-f-mutually-exclusive'
               or 'bad-argument-s-missing-filespec'
               or some of:
              -r 'non-readable'
              -w 'non-writable'
              -x 'non-executable'
              -f 'non-regular-file'
              -d 'non-directory'
              -N 'non-symbolic-link'
              -e 'non-empty-file'
              -O 'not-owned-by-this-UID'
              -G 'not-owned-by-this-GID'
              -m 'not-specified-mimetype'

EXAMPLES
       Check that file exists and is regular, readable, writable:
       sch-file-exists -s '/home/mary/her-doc.txt' -frw

       Check that file exists and is readable textfile:
       sch-file-exists -s '/home/fred/histext.txt' -r -m 'text/plain'

EOF
}